<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--

    (c) 2003-2010 MuleSoft, Inc. This software is protected under international copyright
    law. All use of this software is subject to MuleSoft's Master Subscription Agreement
    (or other master license agreement) separately entered into in writing between you and
    MuleSoft. If such an agreement is not in place, you may not use the software.

-->

<xsd:schema xmlns="http://www.mulesoft.org/schema/mule/ee/core"
            xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            xmlns:mule="http://www.mulesoft.org/schema/mule/core"
            xmlns:spring="http://www.springframework.org/schema/beans"
            xmlns:schemadoc="http://www.mulesoft.org/schema/mule/schemadoc"
            targetNamespace="http://www.mulesoft.org/schema/mule/ee/core"
            elementFormDefault="qualified"
            attributeFormDefault="unqualified">

    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:import namespace="http://www.mulesoft.org/schema/mule/core"
                schemaLocation="http://www.mulesoft.org/schema/mule/core/3.7/mule.xsd"/>
    <xsd:import namespace="http://www.springframework.org/schema/beans"
                schemaLocation="http://www.springframework.org/schema/beans/spring-beans-2.5.xsd"/>
    <xsd:import namespace="http://www.mulesoft.org/schema/mule/schemadoc"
                schemaLocation="http://www.mulesoft.org/schema/mule/schemadoc/3.7/mule-schemadoc.xsd"/>

    <xsd:annotation>
        <xsd:documentation>Support for extensions available only as part of Mule Enterprise</xsd:documentation>
        <xsd:appinfo>
            <schemadoc:short-name>mule-ee</schemadoc:short-name>
            <schemadoc:page-title>Mule Enterprise Edition Extensions</schemadoc:page-title>
        </xsd:appinfo>
    </xsd:annotation>

    <!--
        Multi-TX.
    -->

    <xsd:element name="multi-transaction" type="multiTxType" substitutionGroup="mule:abstract-transaction">
        <xsd:annotation>
            <xsd:documentation>
                Multi-transactions allow a series of operations to be grouped together spanning multiple connections. The connections can be from the same transport or different transports, such as grouping operations from both JMS and JDBC. Multi-transactions work without the overhead of XA. The trade-off is that XA reliability guarantees aren't provided, and services must be ready to handle duplicates. This is very similar to a 1.5 phase commit concept.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="multiTxType">
        <xsd:complexContent>
            <xsd:extension base="mule:baseTransactionType"/>
        </xsd:complexContent>
    </xsd:complexType>

    <!-- **************************************************************************************************
         Deprecated elements from 3.1.x kept for backwards-compatibility.  Remove for the next major release.
         ************************************************************************************************** -->
    <xsd:element name="reconnect" type="mule:reconnectSimpleStrategyType"
                 substitutionGroup="mule:abstract-reconnection-strategy">
        <xsd:annotation>
            <xsd:documentation>
            	@deprecated This element is now part of Mule CE, use the core (mule.xsd) rather than the EE (mule-ee.xsd) namespace.
                A reconnection strategy that allows the user to configure how many times a reconnection should be attempted and how long to wait between attempts.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:element name="reconnect-forever" type="mule:reconnectForeverStrategyType"
                 substitutionGroup="mule:abstract-reconnection-strategy">
        <xsd:annotation>
            <xsd:documentation>
            	@deprecated This element is now part of Mule CE, use the core (mule.xsd) rather than the EE (mule-ee.xsd) namespace.
                A reconnection strategy that retries an infinite number of times at the specified frequency.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:element name="reconnect-custom-strategy" type="mule:reconnectCustomStrategyType"
                 substitutionGroup="mule:abstract-reconnection-strategy">
        <xsd:annotation>
            <xsd:documentation>
            	@deprecated This element is now part of Mule CE, use the core (mule.xsd) rather than the EE (mule-ee.xsd) namespace.
                A user-defined reconnection strategy.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:element name="reconnect-notifier" type="mule:reconnectNotifierType"
                 substitutionGroup="mule:abstract-reconnect-notifier">
        <xsd:annotation>
            <xsd:documentation>
            	@deprecated This element is now part of Mule CE, use the core (mule.xsd) rather than the EE (mule-ee.xsd) namespace.
                Fires a ConnectionNotification upon each reconnection attempt.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:element name="reconnect-custom-notifier" type="mule:reconnectCustomNotifierType"
                 substitutionGroup="mule:abstract-reconnect-notifier">
        <xsd:annotation>
            <xsd:documentation>
            	@deprecated This element is now part of Mule CE, use the core (mule.xsd) rather than the EE (mule-ee.xsd) namespace.
                A user-defined reconnection notifier.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <!--==============================================================-->
    <!--  Cache                                                       -->
    <!--==============================================================-->

    <xsd:element name="abstract-event-copy-strategy" abstract="true" type="abstractEventCopyStrategyType">
        <xsd:annotation>
            <xsd:documentation>

                A placeholder for event copy strategies elements.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="abstractEventCopyStrategyType">
        <xsd:complexContent>
            <xsd:extension base="mule:annotatedType"/>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="simple-event-copy-strategy" substitutionGroup="abstract-event-copy-strategy">
        <xsd:annotation>
            <xsd:documentation>
                Creates copies of a mule event.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="serializable-event-copy-strategy" substitutionGroup="abstract-event-copy-strategy">
        <xsd:annotation>
            <xsd:documentation>
                Creates copies of a mule event and clones the payload using serialization. Requires a Serializable payload.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="abstractCachingStrategyType">
        <xsd:complexContent>
            <xsd:extension base="mule:abstractCachingStrategyType">
                <xsd:sequence>
                    <xsd:element ref="abstract-event-copy-strategy" minOccurs="0" maxOccurs="1">
                        <xsd:annotation>
                            <xsd:documentation>
                                The event copy strategy to use. If not specified, a DefaultMuleEventCopier will be used.
                                will be used.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>

                <xsd:attribute name="keyGenerationExpression" use="optional" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The expression to generate the object's key to store them in the caching strategy. Do not
                            use this property if keyGenerator-ref is used.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>

                <xsd:attribute name="keyGenerator-ref" use="optional" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            Reference to the key generator object used to create the object's key to store them in the
                            caching strategy. Do not use this property if keyGenerationExpression is used.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>

                <xsd:attribute name="responseGenerator-ref" use="optional" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            Reference to the response generator object used to create the responses returned by the
                            caching strategy.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>

                <xsd:attribute name="consumableFilter-ref" use="optional" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            Reference to the message filter used to detect whether a given message contains a consumable
                            payload.
                            A message is not cacheable if its payload is consumable.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="object-store-caching-strategy" type="objectStoreCachingStrategyType"
                 substitutionGroup="mule:abstract-caching-strategy">
        <xsd:annotation>
            <xsd:documentation>
                Defines a caching strategy that uses an object store to cache the data.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="objectStoreCachingStrategyType">
        <xsd:complexContent>
            <xsd:extension base="abstractCachingStrategyType">
                <xsd:sequence>
                    <xsd:element ref="mule:abstract-object-store" minOccurs="0" maxOccurs="1">
                        <xsd:annotation>
                            <xsd:documentation>
                                The object store to use. If not specified, a default InMemoryObjectStore will be used.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
                <xsd:attribute name="persistent" type="xsd:boolean" default="false">
                    <xsd:annotation>
                        <xsd:documentation>
                            When no store is specified, defines if this store should be persistent or not.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="maxEntries" type="mule:substitutableInt" default="4000">
                    <xsd:annotation>
                        <xsd:documentation>
                            When no store is specified, defines the maximum number of entries that this store keeps around. Specify '-1' if the store is supposed to be "unbounded".
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="entryTTL" type="mule:substitutableInt" default="300000">
                    <xsd:annotation>
                        <xsd:documentation>
                            When no store is specified, defines the time-to-live for each message ID when a default object store is created, specified in milliseconds. Use '-1' for entries that should never expire. DO NOT combine this with an unbounded store!
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="expirationInterval" type="mule:substitutableInt" default="30000">
                    <xsd:annotation>
                        <xsd:documentation>
                            When no store is specified, defines the interval for periodic bounded size enforcement and entry expiration, specified in milliseconds. Arbitrary positive values between one second and several hours or days are possible, but should be chosen carefully according to the expected message rate to prevent OutOfMemory conditions.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="synchronized" use="optional" type="xsd:boolean" default="true">
                    <xsd:annotation>
                        <xsd:documentation>
                            Indicates that cache should attempt to synchronize cache access or not. When cache is synchronized each thread accessing a given key will have to acquire a lock on it. This provides a way to obtain cache coherence as there will be only a value for each cache key. Note that cache synchronization cannot be enforced when the underlying cache implementation is used outside the caching strategy. When there is no need to get cache coherence, setting this attribute in false will improve performance as no locking is involved. NOTE: cache keys must be Strings in order to be locked.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="http-caching-strategy" substitutionGroup="mule:abstract-caching-strategy">
        <xsd:annotation>
            <xsd:documentation>
                A caching strategy for HTTP protocol
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="mule:abstractCachingStrategyType"/>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="cache" type="cacheProcessorType"
                 substitutionGroup="mule:abstract-intercepting-message-processor"/>
    <xsd:complexType name="cacheProcessorType">
        <xsd:complexContent>
            <xsd:extension base="mule:abstractInterceptingMessageProcessorType">

                <xsd:sequence>
                    <xsd:group ref="mule:messageProcessorOrOutboundEndpoint" minOccurs="1" maxOccurs="unbounded"/>
                </xsd:sequence>

                <xsd:attribute name="cachingStrategy-ref" use="optional" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            Reference to the caching strategy object that will be provide the caching of messages.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="filterExpression" use="optional" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The expression used to filter which messages should be processed using the caching strategy
                            or not. Do not se this property if filter-ref is used.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="filter-ref" use="optional" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            Reference to a message filter that will determine if the message should be processed using
                            the caching strategy or not. Do not use this property if filterExpression is used.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="invalidate-cache" type="invalidateCacheProcessorType" substitutionGroup="mule:abstract-message-processor"/>
    <xsd:complexType name="invalidateCacheProcessorType">
        <xsd:complexContent>
            <xsd:extension base="mule:abstractMessageProcessorType">

                <xsd:attribute name="cachingStrategy-ref" use="required" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            Reference to the invalidatable caching strategy object that will be invalidated.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="invalidate-key" type="invalidateKeyProcessorType" substitutionGroup="mule:abstract-message-processor"/>
    <xsd:complexType name="invalidateKeyProcessorType">
        <xsd:complexContent>
            <xsd:extension base="mule:abstractMessageProcessorType">

                <xsd:attribute name="cachingStrategy-ref" use="required" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            Reference to the invalidatable caching strategy object where the key will be invalidated.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>

                <xsd:attribute name="keyGenerationExpression" use="optional" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The expression to generate the object's key to store them in the caching strategy. Do not
                            use this property if keyGenerator-ref is used.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>

                <xsd:attribute name="keyGenerator-ref" use="optional" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            Reference to the key generator object used to create the object's key to store them in the
                            caching strategy. Do not use this property if keyGenerationExpression is used.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="spring-store" type="springObjectStoreType" substitutionGroup="mule:abstract-object-store">
        <xsd:annotation>
            <xsd:documentation>
                An object store to use caches defined using spring cache module in Mule.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="springObjectStoreType">
        <xsd:complexContent>
            <xsd:extension base="mule:abstractObjectStoreType">
                <xsd:attribute name="cacheProvider-ref" type="xsd:string" use="prohibited">
                    <xsd:annotation>
                        <xsd:documentation>
                            Deprecated, use cacheManager-ref and cacheName instead.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="cachingModel-ref" type="xsd:string" use="prohibited">
                    <xsd:annotation>
                        <xsd:documentation>
                            Deprecated, use cacheManager-ref and cacheName instead.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>

                <xsd:attribute name="cacheManager-ref" type="xsd:string" use="required">
                    <xsd:annotation>
                        <xsd:documentation>
                            Reference to the cache manager object. This object is typically created using Spring.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="cacheName" type="xsd:string" use="required">
                    <xsd:annotation>
                        <xsd:documentation>
                            Cache name to use.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="xa-transactional" type="mule:abstractTransactional" substitutionGroup="mule:abstract-message-processor">
        <xsd:annotation>
            <xsd:documentation>
                Processes the nest list of message processors within an XA transaction
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="multi-transactional" type="mule:abstractTransactional" substitutionGroup="mule:abstract-message-processor">
        <xsd:annotation>
            <xsd:documentation>
                Processes the nest list of message processors within a multi resource transaction
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>   
</xsd:schema>
